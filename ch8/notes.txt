Notes for chapter 8 exercises and solutions.

- Segfault when ch8_fopen() is changed to ubuffered for all files opened for write:
fp->flag = (*mode == 'r') ? _READ : _WRITE;
to
fp->flag = (*mode == 'r') ? _READ : (_WRITE | _UNBUF);

or setting the flag later also causes a segfault:
w = ch8_fopen("ch8_fclose_write_test.txt", "w");
    if (r == NULL || w == NULL )
        return 1;
w->flag |= _UNBUF;

Possibly fixed the seg fault problem:
<         if ((fp->cnt = write(fp->fd, &c, bufsize)) == 1)
---
>         if (write(fp->fd, &c, bufsize) == 1) {
>             fp->cnt = 0;
84a86
>         }

With the unbuffered segfault problem fixed, using unbuffered produces the correct results:
chris@xps:~/proj/cpl/ch8$ wc -c ch8*_test.txt
36 ch8_fclose_test.txt
36 ch8_fclose_write_test.txt
72 total


- Output missing when writing to a buffered file:
chris@xps:~/proj/cpl/ch8$ gcc -o ch8_fclose_main ch8_fopen.c fclose.c fflush.c flushbuf.c ch8_fillbuf.c ch8_fclose_main.c
chris@xps:~/proj/cpl/ch8$ ./ch8_fclose_main 
chris@xps:~/proj/cpl/ch8$ wc -c ch8*_test.txt
36 ch8_fclose_test.txt
35 ch8_fclose_write_test.txt

The problem occurs when a file reaches the end of a buffer and a buffer is flushed.
When the file reaches the end of the buffer the next character written after the flush is dropped.
OR the character write that forced the flush is dropped...

Need to understand the difference between file operations in the standard library using file pointers, and file operations in syscalls (via library) using file descriptors. File pointers seem to have more attributes and easier to use.


fread() library function and read() syscall documentation from system:

NAME
       fread, fwrite - binary stream input/output

SYNOPSIS
       #include <stdio.h>

       size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);

       size_t fwrite(const void *ptr, size_t size, size_t nmemb,
                     FILE *stream);

DESCRIPTION
       The  function  fread() reads nmemb items of data, each size bytes long,
       from the stream pointed to by stream,  storing  them  at  the  location
       given by ptr.



NAME
       read - read from a file descriptor

SYNOPSIS
       #include <unistd.h>

       ssize_t read(int fd, void *buf, size_t count);

DESCRIPTION
       read()  attempts to read up to count bytes from file descriptor fd into
       the buffer starting at buf.

From:
       ssize_t read(int fd, void *buf, size_t count);
To:
       size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);

